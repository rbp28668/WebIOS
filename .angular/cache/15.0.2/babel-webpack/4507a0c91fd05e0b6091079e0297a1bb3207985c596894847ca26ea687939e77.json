{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TargetComponent {\n  constructor() {\n    // Selected bearing\n    this.bearing = 0;\n    // Selected value\n    this.value = 0;\n    this.radius = 0;\n    this.range = 5;\n    this.units = \"\";\n    this.divider = 1;\n  }\n  ngOnInit() {\n    this.drawTarget();\n  }\n  drawTarget() {\n    const canvas = document.getElementById('myCanvas');\n    const context = canvas.getContext('2d');\n    if (context === null) return;\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const size = canvas.width;\n    const half = size / 2;\n    const lines = this.range / this.divider;\n    this.radius = half - 3; // allow for linewidth = 5 later.\n    context.beginPath();\n    context.arc(centerX, centerY, this.radius, 0, 2 * Math.PI, false);\n    context.fillStyle = '#444';\n    context.fill();\n    context.lineWidth = 5;\n    context.strokeStyle = 'white';\n    context.stroke();\n    context.beginPath();\n    context.strokeStyle = '#ffffff';\n    context.lineWidth = 1;\n    for (var i = 1; i <= lines; ++i) {\n      context.arc(centerX, centerY, this.radius * i / lines, 0, 2 * Math.PI, false);\n    }\n    context.moveTo(0, half);\n    context.lineTo(size, half);\n    context.moveTo(half, 0);\n    context.lineTo(half, size);\n    context.stroke();\n  }\n  clicked(event) {\n    //console.log(event);\n    //console.log(event.clientX);\n    //console.log(event.clientY);\n    //console.log(event.target.offsetLeft);\n    //console.log(event.target.offsetTop);\n    this.drawTarget();\n    var canvas = event.target;\n    var context = canvas.getContext('2d');\n    if (context === null) return;\n    var size = canvas.width;\n    var half = size / 2;\n    var x = event.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft) - canvas.offsetLeft;\n    var y = event.clientY + (document.documentElement.scrollTop || document.body.scrollTop) - canvas.offsetTop;\n    // x and y now relative to top left of target.\n    context.beginPath();\n    context.strokeStyle = '#ffffff';\n    context.lineWidth = 1;\n    context.moveTo(half, half);\n    context.lineTo(x, y);\n    context.stroke();\n    x = x - half;\n    y = y - half;\n    this.bearing = 90 + Math.atan2(y, x) * 180 / Math.PI;\n    if (this.bearing < 0) this.bearing = this.bearing + 360;\n    this.value = Math.sqrt(x * x + y * y) * this.range / this.radius;\n    console.log(\"Target: \" + this.value + \", \" + this.bearing);\n  }\n}\nTargetComponent.ɵfac = function TargetComponent_Factory(t) {\n  return new (t || TargetComponent)();\n};\nTargetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TargetComponent,\n  selectors: [[\"app-target\"]],\n  inputs: {\n    range: \"range\",\n    units: \"units\",\n    divider: \"divider\"\n  },\n  decls: 1,\n  vars: 0,\n  consts: [[\"id\", \"myCanvas\", \"width\", \"300\", \"height\", \"300\", 3, \"click\"]],\n  template: function TargetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"canvas\", 0);\n      i0.ɵɵlistener(\"click\", function TargetComponent_Template_canvas_click_0_listener($event) {\n        return ctx.clicked($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}