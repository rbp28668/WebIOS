{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./settings\";\n// TODO - find proper function for this.\nfunction URLEncode(value) {\n  return value;\n}\nexport class P3dcmdService {\n  constructor(http, settings) {\n    this.http = http;\n    this.settings = settings;\n  }\n  // Runs a command, returns true on success.\n  runCommand(cmd) {\n    return this.http.get(this.baseUrl() + cmd);\n  }\n  //////////////////////////////////////////////////////////////\n  // SCENARIOS\n  scenariosList(filter) {\n    var url = this.baseUrl() + \"scenario/list\";\n    if (filter) {\n      url = url + \"?filter=\" + filter;\n    }\n    return this.http.get(url);\n  }\n  scenariosLoad(file) {\n    var url = this.baseUrl() + \"scenario/load?file=\" + URLEncode(file);\n    return this.http.get(url);\n  }\n  scenariosSave(file, title, description) {\n    var url = this.baseUrl() + \"scenario/save\";\n    url = url + \"?file=\" + URLEncode(file);\n    if (title) {\n      url = url + \"&\" + URLEncode(title);\n    }\n    if (description) {\n      url = url + \"&\" + URLEncode(description);\n    }\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // POSITION\n  positionCurrent() {\n    var url = this.baseUrl() + \"position/current\";\n    return this.http.get(url);\n  }\n  positionAvailable() {\n    var url = this.baseUrl() + \"position/available\";\n    return this.http.get(url);\n  }\n  positionBack(count) {\n    var url = this.baseUrl() + \"position/back\";\n    if (count) {\n      url += \"?count=\" + count;\n    }\n    return this.http.get(url);\n  }\n  positionSet(count) {\n    var url = this.baseUrl() + \"position/set\";\n    if (count) {\n      url += \"?count=\" + count;\n    }\n    return this.http.get(url);\n  }\n  positionList(filter) {\n    var url = this.baseUrl() + \"position/list\";\n    if (filter) {\n      url += \"?filter\" + filter;\n    }\n    return this.http.get(url);\n  }\n  positionLoad(file) {\n    var url = this.baseUrl() + \"position/load?file=\" + URLEncode(file);\n    return this.http.get(url);\n  }\n  positionSave(file, title, description) {\n    var url = this.baseUrl() + \"position/save\";\n    url = url + \"?file=\" + URLEncode(file);\n    if (title) {\n      url = url + \"&\" + URLEncode(title);\n    }\n    if (description) {\n      url = url + \"&\" + URLEncode(description);\n    }\n    return this.http.get(url);\n  }\n  positionUp(feet) {\n    var url = this.baseUrl() + \"position/up\";\n    if (feet) {\n      url += \"?feet\" + feet;\n    }\n    return this.http.get(url);\n  }\n  positionDown(feet) {\n    var url = this.baseUrl() + \"position/down\";\n    if (feet) {\n      url += \"?feet\" + feet;\n    }\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // THERMAL\n  thermalDrop(radius, height, rate) {\n    var url = this.baseUrl() + \"thermal/drop\";\n    var ch = \"?\";\n    if (radius) {\n      url += ch + \"radius=\" + radius;\n      ch = \"&\";\n    }\n    if (height) {\n      url += ch + \"height=\" + height;\n      ch = \"&\";\n    }\n    if (rate) {\n      url += ch + \"rate=\" + rate;\n      ch = \"&\";\n    }\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // RECORD\n  recordStart() {\n    var url = this.baseUrl() + \"record/record\";\n    return this.http.get(url);\n  }\n  recordPlay(title) {\n    var url = this.baseUrl() + \"record/play\";\n    url += \"?title=\" + URLEncode(title);\n    return this.http.get(url);\n  }\n  recordStop(title, description) {\n    var url = this.baseUrl() + \"record/stop\";\n    url += \"?title=\" + URLEncode(title);\n    if (description) {\n      url += \"&\" + URLEncode(description);\n    }\n    return this.http.get(url);\n  }\n  recordList() {\n    var url = this.baseUrl() + \"record/list\";\n    return this.http.get(url);\n  }\n  recordAnalyse() {\n    var url = this.baseUrl() + \"record/analyse\";\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // Failures\n  // Note, setting/clearing failures not directly implemented as\n  // easy to set/clear directly from a button with mode=true or mode=false\n  failuresCurrent() {\n    var url = this.baseUrl() + \"failures/current\";\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // TRAFFIC\n  trafficLaunch(range, speedKts, bearing, name, tail_number, relative_height) {\n    var url = this.baseUrl() + \"traffic/launch\";\n    var ch = \"?\";\n    if (range) {\n      url += ch + \"range=\" + range;\n      ch = \"&\";\n    }\n    if (speedKts) {\n      url += ch + \"speed=\" + speedKts;\n      ch = \"&\";\n    }\n    if (bearing) {\n      url += ch + \"bearing=\" + bearing;\n      ch = \"&\";\n    }\n    if (name) {\n      url += ch + \"name=\" + URLEncode(name);\n      ch = \"&\";\n    }\n    if (tail_number) {\n      url += ch + \"tail_number=\" + URLEncode(tail_number);\n      ch = \"&\";\n    }\n    if (relative_height) {\n      url += ch + \"relative_height=\" + relative_height;\n    }\n    return this.http.get(url);\n  }\n  trafficAircraft() {\n    var url = this.baseUrl() + \"traffic/aircraft\";\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // IGC\n  igcList(filter) {\n    var url = this.baseUrl() + \"igc/list\";\n    if (filter) {\n      url += \"?\" + \"filter=\" + URLEncode(filter);\n    }\n    return this.http.get(url);\n  }\n  igcReplay(igc) {\n    var url = this.baseUrl() + \"igc/replay\";\n    url += \"?\" + \"igc=\" + URLEncode(igc);\n    return this.http.get(url);\n  }\n  igcTraffic(igc, type, restart) {\n    var url = this.baseUrl() + \"igc/traffic\";\n    url += \"?\" + \"igc=\" + URLEncode(igc);\n    url += \"&\" + \"type=\" + URLEncode(type);\n    if (restart) {\n      url += \"&\" + \"restart=\" + restart;\n    }\n    return this.http.get(url);\n  }\n  igcClear() {\n    var url = this.baseUrl() + \"igc/clear\";\n    return this.http.get(url);\n  }\n  igcStartRecording(interval, p1, p2, glider_type, registration, comp_class, comp_id) {\n    var url = this.baseUrl() + \"igc/start\";\n    url += \"?\" + \"igc=\" + interval;\n    if (p1) url += \"&\" + \"p1\" + URLEncode(p1);\n    if (p2) url += \"&\" + \"p1\" + URLEncode(p2);\n    if (glider_type) url += \"&\" + \"p1\" + URLEncode(glider_type);\n    if (registration) url += \"&\" + \"p1\" + URLEncode(registration);\n    if (comp_class) url += \"&\" + \"p1\" + URLEncode(comp_class);\n    if (comp_id) url += \"&\" + \"p1\" + URLEncode(comp_id);\n    return this.http.get(url);\n  }\n  igcStopRecording() {\n    var url = this.baseUrl() + \"igc/stop\";\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // Weather\n  weatherThemes() {\n    var url = this.baseUrl() + \"weather/themes\";\n    return this.http.get(url);\n  }\n  weatherSetTheme(name) {\n    var url = this.baseUrl() + \"weather/theme\";\n    url += \"?name=\" + URLEncode(name);\n    return this.http.get(url);\n  }\n  weatherUseGlobal() {\n    var url = this.baseUrl() + \"weather/global\";\n    return this.http.get(url);\n  }\n  weatherUseCustom() {\n    var url = this.baseUrl() + \"weather/custom\";\n    return this.http.get(url);\n  }\n  weatherRequest(station) {\n    var url = this.baseUrl() + \"weather/request\";\n    url = url + \"?name=\" + URLEncode(station);\n    return this.http.get(url);\n  }\n  weatherRequestGlobal() {\n    var url = this.baseUrl() + \"weather/request_global\";\n    return this.http.get(url);\n  }\n  weatherRefresh() {\n    var url = this.baseUrl() + \"weather/refresh\";\n    return this.http.get(url);\n  }\n  weatherAddStation(station) {\n    var url = this.baseUrl() + \"weather/add\";\n    url = url + \"?icao=\" + URLEncode(station);\n    return this.http.get(url);\n  }\n  weatherAddStationHere(station, name) {\n    var url = this.baseUrl() + \"weather/add_here\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    if (name) {\n      url = url + ch + \"name=\" + URLEncode(name);\n    }\n    return this.http.get(url);\n  }\n  weatherStations() {\n    var url = this.baseUrl() + \"weather/stations\";\n    return this.http.get(url);\n  }\n  encodeWind(extension, kts, direction, gusts, depth, turbulence, windshear) {\n    var speed = \"000\" + kts.toFixed();\n    speed = speed.substring(speed.length - 3);\n    var dirn = \"000\" + direction.toFixed();\n    dirn = dirn.substring(dirn.length - 3);\n    var wind = dirn + speed;\n    if (gusts) {\n      var g = \"00\" + gusts.toFixed();\n      g = g.substring(g.length - 2);\n      wind = wind + \"G\" + g;\n    }\n    wind = wind + \"KT\";\n    var extend = depth || turbulence || windshear;\n    if (extend) {\n      if (!depth) {\n        depth = 350;\n      }\n      if (!turbulence) {\n        turbulence = \"N\";\n      }\n      if (!windshear) {\n        windshear = \"G\"; // gradual\n      }\n\n      var d = \"0000\" + depth.toFixed();\n      d = d.substring(d.length - 4);\n      wind = wind + \"&\" + extension + d + turbulence + windshear;\n    }\n    return wind;\n  }\n  weatherSetSurfaceWind(station, kts, direction, gusts, depth, turbulence, windshear) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var wind = this.encodeWind(\"D\", kts, direction, gusts, depth, turbulence, windshear);\n    url = url + ch + \"surface_wind=\" + URLEncode(wind);\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetWindsAloft(station, kts, direction, gusts, depth, turbulence, windshear) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var wind = this.encodeWind(\"A\", kts, direction, gusts, depth, turbulence, windshear);\n    url = url + ch + \"winds_aloft=\" + URLEncode(wind);\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetCAVOK(station) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    url = url + ch + \"cavok=CAVOK\";\n    return this.http.get(url);\n  }\n  weatherSetVisibility(station, visibility) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var vis = \"\";\n    if (visibility < 0.25) {\n      vis = \"M1/4SM\";\n    } else if (visibility < 1) {\n      var eigths = (visibility * 8).toFixed();\n      vis = eigths + \"/8SM\";\n    } else {\n      vis = visibility.toFixed() + \"SM\";\n    }\n    url = url + ch + \"visibility=\" + vis;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetRVR(station, runway, rvr) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var r = \"0000\" + rvr.toFixed();\n    r = r.substring(r.length - 4);\n    var range = \"R\" + runway + \"/\" + r + \"FT\";\n    url = url + ch + \"rvr=\" + range;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetPresentConditions(station, intensity, vicinity, descriptor, phenomena) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var conditions = \"\";\n    if (intensity == \"light\") {\n      conditions = conditions + \"-\";\n    } else if (intensity == \"severe\") {\n      conditions = conditions + \"+\";\n    }\n    if (vicinity) {\n      conditions = conditions + \"VC\";\n    }\n    conditions = conditions + descriptor + phenomena;\n    url = url + ch + \"present_conditions=\" + conditions;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetPartialObsucration(station, partialObsucration) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var view = null;\n    if (partialObsucration == \"few\") {\n      view = \"FEW000\";\n    } else if (partialObsucration == \"scattered\") {\n      view = \"SCT000\";\n    } else if (partialObsucration == \"broken\") {\n      view = \"BKN000\";\n    } else {\n      console.log(`Unknown obscuration: ${partialObsucration}`);\n    }\n    url = url + ch + \"partial_obscuration=\" + view;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetSkyConditions(station, height, amount, seconds) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var h = \"000\";\n    if (height) {\n      if (height >= 100000) {\n        h = \"999\";\n      } else {\n        h = \"000\" + (height / 100).toFixed();\n        h = h.substring(h.length - 3);\n      }\n    }\n    url = url + ch + amount + h;\n    ch = '&';\n    if (seconds) {\n      url = url + ch + \"seconds=\" + seconds;\n    }\n    return this.http.get(url);\n  }\n  weatherSetTemperature(station, temperature, dewpoint) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    url = url + ch + temperature.toFixed() + \"/\" + dewpoint.toFixed();\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetQNH(station, qnh) {\n    var url = this.baseUrl() + \"weather/update\";\n    var ch = '?';\n    if (station) {\n      url = url + ch + \"icao=\" + URLEncode(station);\n      ch = '&';\n    }\n    var mb = \"0000\" + qnh.toFixed();\n    mb = mb.substring(mb.length - 4);\n    mb = \"Q\" + mb;\n    url = url + ch + \"altimiter=\" + URLEncode(mb);\n    return this.http.get(url);\n  }\n  weatherSetMetar(metar, seconds) {\n    var url = this.baseUrl() + \"weather/set_metar\";\n    url = url + \"?metar=\" + URLEncode(metar);\n    if (seconds) {\n      url = url + \"&seconds=\" + seconds;\n    }\n    return this.http.get(url);\n  }\n  weatherSetGlobalSurfaceWind(kts, direction, gusts, depth, turbulence, windshear) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var wind = this.encodeWind(\"D\", kts, direction, gusts, depth, turbulence, windshear);\n    url = url + ch + \"surface_wind=\" + URLEncode(wind);\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalWindsAloft(kts, direction, gusts, depth, turbulence, windshear) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var wind = this.encodeWind(\"A\", kts, direction, gusts, depth, turbulence, windshear);\n    url = url + ch + \"winds_aloft=\" + URLEncode(wind);\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalCAVOK() {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    url = url + ch + \"cavok=CAVOK\";\n    return this.http.get(url);\n  }\n  weatherSetGlobalVisibility(visibility) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var vis = \"\";\n    if (visibility < 0.25) {\n      vis = \"M1/4SM\";\n    } else if (visibility < 1) {\n      var eigths = (visibility * 8).toFixed();\n      vis = eigths + \"/8SM\";\n    } else {\n      vis = visibility.toFixed() + \"SM\";\n    }\n    url = url + ch + \"visibility=\" + vis;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalRVR(runway, rvr) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var r = \"0000\" + rvr.toFixed();\n    r = r.substring(r.length - 4);\n    var range = \"R\" + runway + \"/\" + r + \"FT\";\n    url = url + ch + \"rvr=\" + range;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalPresentConditions(intensity, vicinity, descriptor, phenomena) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var conditions = \"\";\n    if (intensity == \"light\") {\n      conditions = conditions + \"-\";\n    } else if (intensity == \"severe\") {\n      conditions = conditions + \"+\";\n    }\n    if (vicinity) {\n      conditions = conditions + \"VC\";\n    }\n    conditions = conditions + descriptor + phenomena;\n    url = url + ch + \"present_conditions=\" + conditions;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalPartialObscuration(partialObscuration) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var view = null;\n    if (partialObscuration == \"few\") {\n      view = \"FEW000\";\n    } else if (partialObscuration == \"scattered\") {\n      view = \"SCT000\";\n    } else if (partialObscuration == \"broken\") {\n      view = \"BKN000\";\n    } else {\n      console.log(`Unknown obscuration: ${partialObscuration}`);\n    }\n    url = url + ch + \"partial_obscuration=\" + view;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalSkyConditions(height, amount) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var h = \"000\";\n    if (height) {\n      if (height >= 100000) {\n        h = \"999\";\n      } else {\n        h = \"000\" + (height / 100).toFixed();\n        h = h.substring(h.length - 3);\n      }\n    }\n    url = url + ch + amount + h;\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalTemperature(temperature, dewpoint) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    url = url + ch + temperature.toFixed() + \"/\" + dewpoint.toFixed();\n    ch = '&';\n    return this.http.get(url);\n  }\n  weatherSetGlobalQNH(qnh) {\n    var url = this.baseUrl() + \"weather/update_global\";\n    var ch = '?';\n    var mb = \"0000\" + qnh.toFixed();\n    mb = mb.substring(mb.length - 4);\n    mb = \"Q\" + mb;\n    url = url + ch + \"altimiter=\" + URLEncode(mb);\n    return this.http.get(url);\n  }\n  weatherSetGlobalMetar(metar, seconds) {\n    var url = this.baseUrl() + \"weather/set_global_metar\";\n    url = url + \"?metar=\" + URLEncode(metar);\n    if (seconds) {\n      url = url + \"&seconds=\" + seconds;\n    }\n    return this.http.get(url);\n  }\n  //////////////////////////////////////////////////////////////\n  // Log\n  logOn(name, membershipNumber) {\n    var url = this.baseUrl() + \"log/logon\";\n    url = url + \"?name=\" + URLEncode(name);\n    url = url + \"&number=\" + membershipNumber;\n    return this.http.get(url);\n  }\n  logOff() {\n    var url = this.baseUrl() + \"log/logoff\";\n    return this.http.get(url);\n  }\n  logMessage(type, msg) {\n    var url = this.baseUrl() + \"log/\" + type;\n    url = url + \"?message=\" + URLEncode(msg);\n    return this.http.get(url);\n  }\n  logInfo(message) {\n    return this.logMessage(\"info\", message);\n  }\n  logWarning(message) {\n    return this.logMessage(\"warn\", message);\n  }\n  logError(message) {\n    return this.logMessage(\"error\", message);\n  }\n  //////////////////////////////////////////////////////////////\n  // Panel\n  //////////////////////////////////////////////////////////////\n  // Support routines\n  baseUrl() {\n    var url = \"http://\" + this.settings.api_host + \":\" + this.settings.api_port + \"/p3dapi/\";\n    //console.log(\"Using: \" + url);\n    return url;\n  }\n}\nP3dcmdService.ɵfac = function P3dcmdService_Factory(t) {\n  return new (t || P3dcmdService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Settings));\n};\nP3dcmdService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: P3dcmdService,\n  factory: P3dcmdService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}